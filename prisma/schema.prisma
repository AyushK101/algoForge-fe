// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  // name String
  username String
  email     String   @unique
  pictureId String
  role      Role     @default(USER)
  // password  String
  // salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
}

enum Role {
  USER
  ADMIN
}

model Problem {
  id          String   @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  testcases   Testcase[]
  submissions Submission[]
}

enum Difficulty {
  easy
  medium
  hard
}

model Testcase {
  id        String   @id @default(uuid())
  input     String
  output    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem Problem @relation(fields: [problemId], references: [id])
}

model Contest {
  id        String   @id @default(uuid())
  title     String
  status    Status
  started   DateTime
  ended     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  ACTIVE
  ENDED
}

model Submission {
  id        String @id @default(uuid())
  userId    String
  problemId String
  source_code String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@index([userId, problemId])
}
